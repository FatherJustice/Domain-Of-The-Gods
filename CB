if not game:IsLoaded() then
    game.Loaded:Wait()
end
wait()

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Player = Players.LocalPlayer

-- Variables for power management
local OldPercentage = 100
local Power = 100
local isFivePercent = false -- Track the state

-- Function to set power percentage
local function setPowerPercentage(Percentage)
    Percentage = tonumber(Percentage)
    if Percentage > OldPercentage then
        repeat
            Power = Power + 5
            Player.Backpack.ServerTraits.Input:FireServer({"increase"}, true)
        until Power >= Percentage
    elseif Percentage < OldPercentage then
        repeat
            Power = Power - 5
            Player.Backpack.ServerTraits.Input:FireServer({"decrease"}, true)
        until Power <= Percentage
    end
    OldPercentage = Percentage
    print("Power set to:", Percentage)
end

-- Key mappings
local keyBindings = {
    [Enum.KeyCode.LeftBracket] = 75,
    [Enum.KeyCode.RightBracket] = 100,
    [Enum.KeyCode.Comma] = 50,
    [Enum.KeyCode.Semicolon] = function()
        isFivePercent = not isFivePercent
        return isFivePercent and 5 or 100
    end,
}

-- Listen for key presses to adjust power
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent then
        local action = keyBindings[input.KeyCode]
        if action then
            local targetPercentage = typeof(action) == "function" and action() or action
            setPowerPercentage(targetPercentage)
        end
    end
end)
