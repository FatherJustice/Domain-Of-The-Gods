if not game:IsLoaded() then
    game.Loaded:Wait()
end
wait(5)
local RS = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Player = Players.LocalPlayer

local antiKnockBackEnabled = true
local antiKnockBackConnection

-- Function to wait for the player and character to be loaded
local function waitForPlayer()
    while not Player.Character do
        Player.CharacterAdded:Wait()
    end
end

-- Function to handle Anti-KnockBack logic
local function antiKnockBack()
    if not antiKnockBackEnabled then return end

    pcall(function()
        if Player.Character and Player.Character:FindFirstChild("Head") then
            local head = Player.Character.Head
            
            if head:FindFirstChild("KnockBacked") then
                head.KnockBacked:Destroy()
            end
        end
    end)
end

-- Function to toggle Anti-KnockBack
local function toggleAntiKnockBack()
    antiKnockBackEnabled = not antiKnockBackEnabled
    
    if antiKnockBackEnabled then
        if not antiKnockBackConnection then
            antiKnockBackConnection = RS.RenderStepped:Connect(antiKnockBack)
        end
    else
        if antiKnockBackConnection then
            antiKnockBackConnection:Disconnect()
            antiKnockBackConnection = nil
        end
    end
end

-- Wait for the player and their character to load
waitForPlayer()

-- Listen for key presses
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.RightBracket then
        toggleAntiKnockBack()
    end
end)
